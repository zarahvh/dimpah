Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1107, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.2/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 852, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import statsmodels.api as sm

import statsmodels.formula.api as smf

df_copy = df_clean
df_black = df_copy.loc[df_copy['race']=='African-American']
df_white = df_copy.loc[df_copy['race']=='Caucasian']

# Make dictionairy for African-Americans controlled for certain variables
bb = {}
for index, row in df_black.iterrows():
    # Hash function as key for dictionairy
    hashed = repr([df_black['priors_count'].loc[index], df_black['sex'].loc[index], df_black['c_charge_degree'].loc[index], df_black['age'].loc[index], df_black['days_b_screening_arrest'].loc[index], df_black['two_year_recid'].loc[index], df_black['age_cat'].loc[index]])
    if hashed in bb:
        bb[hashed].append(index)
    else:
        bb[hashed] = [index]

# Make dictionairy for Caucasians controlled for certain variables
bw = {}
for index, row in df_white.iterrows():
    # Hash function as key for dictionairy
    hashed = repr([df_white['priors_count'].loc[index], df_white['sex'].loc[index], df_white['c_charge_degree'].loc[index], df_white['age'].loc[index], df_white['days_b_screening_arrest'].loc[index], df_white['two_year_recid'].loc[index], df_white['age_cat'].loc[index]])
    if hashed in bw:
        bw[hashed].append(index)
    else:
        bw[hashed] = [index]

# Make specific dataframes based on indexes
score_w = 0
score_b = 0

for keys in bw.keys():
    if keys in bb.keys():
        # Get list of indexes
        indexes_white = bw[keys]
        indexes_black = bb[keys]
        
        # Loop through indexes
        values_white = [df_white.loc[j].values for j in indexes_white]
        values_black = [df_black.loc[j].values for j in indexes_black]
        
        # Create dataframes out of data from indexes
        df_new_white = pd.DataFrame(values_white, columns = df_clean.keys())
        df_new_black = pd.DataFrame(values_black, columns = df_clean.keys())
        
        # Fit logistic regression on dataframes
        results_white = smf.ols('decile_score ~ sex + age_cat + priors_count + two_year_recid + age + c_charge_degree + days_b_screening_arrest', data=df_new_white).fit()
        results_black = smf.ols('decile_score ~ sex + age_cat + priors_count + two_year_recid + age + c_charge_degree + days_b_screening_arrest', data=df_new_black).fit()

        # Compute results based on predictions of the fit
        if results_black.predict()[0] > 4:
            score_b += 1
        if results_white.predict()[0] > 4:
            score_w += 1
        
print(score_b / score_w)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-12-738a101a5f77>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mstatsmodels[0m[0;34m.[0m[0mapi[0m [0;32mas[0m [0msm[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mstatsmodels[0m[0;34m.[0m[0mformula[0m[0;34m.[0m[0mapi[0m [0;32mas[0m [0msmf[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mdf_copy[0m [0;34m=[0m [0mdf_clean[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'statsmodels'
ModuleNotFoundError: No module named 'statsmodels'

